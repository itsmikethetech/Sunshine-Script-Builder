const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

// Store project data in memory (could be extended to use a database)
let projectData = {
    name: '',
    beforeScripts: [],
    afterScripts: [],
    variables: {}
};

// Script actions database
const scriptActions = [
    // Enhanced Display Management
    {
        name: "Set Display Resolution",
        category: "Display",
        command: `powershell.exe -command "$deviceId = '{device_id}'; # Use device ID to change display resolution - implementation varies by system"`,
        description: "Change resolution for specific display",
        variables: ["device_id", "width", "height"]
    },
    {
        name: "Set Primary Display",
        category: "Display",
        command: `powershell.exe -command "$deviceId = '{device_id}'; # Set display as primary using device ID"`,
        description: "Set display as primary",
        variables: ["device_id"]
    },
    {
        name: "Disable Display",
        category: "Display",
        command: `powershell.exe -command "$deviceId = '{device_id}'; Disable-PnpDevice -InstanceId $deviceId -Confirm:$false"`,
        description: "Disable specific display",
        variables: ["device_id"]
    },
    {
        name: "Enable Display",
        category: "Display",
        command: `powershell.exe -command "$deviceId = '{device_id}'; Enable-PnpDevice -InstanceId $deviceId -Confirm:$false"`,
        description: "Enable specific display",
        variables: ["device_id"]
    },
    // Enhanced Audio Management
    {
        name: "Set Default Audio Device",
        category: "Audio",
        command: `powershell.exe -command "try { $device = Get-AudioDevice -List | Where-Object { $_.Name -eq '{device_name}' -or $_.ID -eq '{device_id}' }; if($device) { Set-AudioDevice -ID $device.ID } } catch { Write-Host 'AudioDeviceCmdlets not available, using alternative method'; $devices = Get-WmiObject -Class Win32_SoundDevice; $targetDevice = $devices | Where-Object { $_.Name -eq '{device_name}' }; if($targetDevice) { $targetDevice.SetAsDefault() } }"`,
        description: "Set specific audio device as default",
        variables: ["device_name", "device_id"]
    },
    {
        name: "Disable Audio Device",
        category: "Audio",
        command: `powershell.exe -command "$deviceName = '{device_name}'; $device = Get-PnpDevice | Where-Object { $_.FriendlyName -like '*' + $deviceName + '*' -and $_.Class -eq 'AudioEndpoint' }; if($device) { Disable-PnpDevice -InstanceId $device.InstanceId -Confirm:$false }"`,
        description: "Disable specific audio device",
        variables: ["device_name"]
    },
    // Gaming
    {
        name: "Close Steam",
        category: "Gaming",
        command: "taskkill /f /im steam.exe",
        description: "Force close Steam client",
        variables: []
    },
    {
        name: "Start Steam Big Picture",
        category: "Gaming",
        command: `start "" "steam://open/bigpicture"`,
        description: "Launch Steam in Big Picture mode",
        variables: []
    },
    // Power Management
    {
        name: "High Performance Power",
        category: "Power",
        command: "powercfg /s 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c",
        description: "Switch to High Performance power plan",
        variables: []
    },
    {
        name: "Balanced Power",
        category: "Power", 
        command: "powercfg /s 381b4222-f694-41f0-9685-ff5bb260df2e",
        description: "Switch to Balanced power plan",
        variables: []
    },
    // Services
    {
        name: "Start Service",
        category: "Services",
        command: `net start "{service_name}"`,
        description: "Start a Windows service",
        variables: ["service_name"]
    },
    {
        name: "Stop Service",
        category: "Services",
        command: `net stop "{service_name}"`,
        description: "Stop a Windows service",
        variables: ["service_name"]
    },
    // Custom
    {
        name: "Custom Command",
        category: "Custom",
        command: "{custom_command}",
        description: "Execute a custom command",
        variables: ["custom_command"]
    },
    {
        name: "Wait/Delay",
        category: "Utility",
        command: "timeout /t {seconds} /nobreak",
        description: "Wait for specified seconds",
        variables: ["seconds"]
    }
];

// Helper function to execute PowerShell commands
function executePowerShell(command) {
    return new Promise((resolve, reject) => {
        exec(command, { timeout: 15000 }, (error, stdout, stderr) => {
            if (error) {
                reject({ error: error.message, stderr });
                return;
            }
            resolve({ stdout: stdout.trim(), stderr });
        });
    });
}

// API Routes

// Get all script actions
app.get('/api/actions', (req, res) => {
    const { category } = req.query;
    let filteredActions = scriptActions;
    
    if (category && category !== 'All') {
        filteredActions = scriptActions.filter(action => action.category === category);
    }
    
    res.json(filteredActions);
});

// Get available categories
app.get('/api/categories', (req, res) => {
    const categories = ['All', ...new Set(scriptActions.map(action => action.category))];
    res.json(categories);
});

// Enumerate displays
app.get('/api/displays', async (req, res) => {
    try {
        // Use PowerShell with single quotes to avoid variable expansion
        const cmd = `powershell.exe -command 'Add-Type -AssemblyName System.Windows.Forms; $screens = [System.Windows.Forms.Screen]::AllScreens; $pnpMonitors = @(); try { $pnpMonitors = Get-PnpDevice -Class Monitor | Where-Object { $_.Status -eq "OK" } } catch { }; $screenIndex = 0; foreach ($screen in $screens) { $screenIndex++; $deviceId = "fallback-id-" + $screenIndex; $friendlyName = "Display " + $screenIndex; if ($pnpMonitors.Count -ge $screenIndex) { $pnp = $pnpMonitors[$screenIndex - 1]; if ($pnp.InstanceId) { $deviceId = $pnp.InstanceId; $friendlyName = $pnp.FriendlyName } }; Write-Output ($screenIndex.ToString() + "|" + $deviceId + "|" + $screen.DeviceName + "|" + $screen.Bounds.Width + "x" + $screen.Bounds.Height + "|" + $screen.Primary + "|" + $friendlyName) }'`;
        
        const result = await executePowerShell(cmd);
        console.log('Display enumeration result:', result);
        
        const displays = [];
        
        if (result.stdout) {
            const lines = result.stdout.split('\n');
            for (const line of lines) {
                const trimmedLine = line.trim();
                // Skip debug output and only process data lines
                if (trimmedLine.includes('|') && !trimmedLine.startsWith('Found')) {
                    const parts = trimmedLine.split('|');
                    if (parts.length >= 6) {
                        const id = parseInt(parts[0]);
                        const deviceId = parts[1];
                        const devicePath = parts[2];
                        const resolution = parts[3];
                        const isPrimary = parts[4].toLowerCase() === 'true';
                        const friendlyName = parts[5];
                        
                        displays.push({
                            id: id,
                            deviceId: deviceId,
                            name: devicePath,
                            devicePath: devicePath,
                            resolution: resolution,
                            isPrimary: isPrimary,
                            friendlyName: `${friendlyName} - ${resolution}${isPrimary ? '*' : ''}`,
                            displayName: friendlyName
                        });
                    }
                }
            }
        }
        
        console.log('Parsed displays:', displays);
        
        // Fallback if no displays found
        if (displays.length === 0) {
            displays.push({
                id: 1,
                deviceId: '{default-display-id}',
                name: '\\\\.\\DISPLAY1',
                devicePath: '\\\\.\\DISPLAY1',
                resolution: 'Unknown',
                isPrimary: true,
                friendlyName: 'Primary Display - Unknown*',
                displayName: 'Primary Display'
            });
        }
        
        res.json(displays);
    } catch (error) {
        console.error('Failed to enumerate displays:', error);
        res.json([{
            id: 1,
            deviceId: '{default-display-id}',
            name: '\\\\.\\DISPLAY1',
            devicePath: '\\\\.\\DISPLAY1',
            resolution: 'Unknown',
            isPrimary: true,
            friendlyName: 'Primary Display - Unknown*',
            displayName: 'Primary Display'
        }]);
    }
});

// Enumerate audio devices
app.get('/api/audio-devices', async (req, res) => {
    try {
        // Use PowerShell with single quotes to avoid variable expansion
        const cmd = `powershell.exe -command 'try { Import-Module AudioDeviceCmdlets -ErrorAction Stop; Get-AudioDevice -List | Where-Object { $_.Type -eq "Playback" } | ForEach-Object { Write-Output ($_.Index.ToString() + "|" + $_.Name + "|" + $_.Default.ToString() + "|" + $_.ID) } } catch { Write-Output "MODULE_NOT_AVAILABLE" }'`;
        
        console.log('Running enhanced audio enumeration...');
        const result = await executePowerShell(cmd);
        console.log('Audio enumeration result:', result);
        
        const audioDevices = [];
        
        if (result.stdout && !result.stdout.includes('MODULE_NOT_AVAILABLE')) {
            const lines = result.stdout.split('\n');
            for (const line of lines) {
                const trimmedLine = line.trim();
                if (trimmedLine.includes('|')) {
                    const parts = trimmedLine.split('|');
                    if (parts.length >= 4) {
                        audioDevices.push({
                            id: parts[3].trim(),
                            index: parts[0].trim(),
                            name: parts[1].trim(),
                            isDefault: parts[2].toLowerCase().trim() === 'true',
                            friendlyName: `${parts[1].trim()}${parts[2].toLowerCase().trim() === 'true' ? ' (Default)' : ''}`
                        });
                    }
                }
            }
        } else {
            // Fallback to WMI method
            const fallbackCmd = `powershell.exe -command 'Get-WmiObject -Class Win32_SoundDevice | Where-Object { $_.Status -eq "OK" } | ForEach-Object { $index = [Array]::IndexOf((Get-WmiObject -Class Win32_SoundDevice | Where-Object { $_.Status -eq "OK" }), $_); $deviceName = if ($_.Caption) { $_.Caption } else { $_.Name }; Write-Output ($index.ToString() + "|" + $deviceName + "|False|" + $_.DeviceID) }'`;
            
            const fallbackResult = await executePowerShell(fallbackCmd);
            if (fallbackResult.stdout) {
                const lines = fallbackResult.stdout.split('\n');
                let deviceIndex = 0;
                for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (trimmedLine.includes('|')) {
                        const parts = trimmedLine.split('|');
                        if (parts.length >= 4) {
                            audioDevices.push({
                                id: parts[3].trim(),
                                index: parts[0].trim(),
                                name: parts[1].trim(),
                                isDefault: deviceIndex === 0, // First device as default
                                friendlyName: `${parts[1].trim()}${deviceIndex === 0 ? ' (Default)' : ''}`
                            });
                            deviceIndex++;
                        }
                    }
                }
            }
        }
        
        // Ultimate fallback
        if (audioDevices.length === 0) {
            audioDevices.push({
                id: 'default-audio-device',
                index: '0',
                name: 'Default Audio Device',
                isDefault: true,
                friendlyName: 'Default Audio Device (Default)'
            });
        }
        
        console.log('Parsed audio devices:', audioDevices.length, 'devices found');
        res.json(audioDevices);
    } catch (error) {
        console.error('Failed to enumerate audio devices:', error);
        res.json([{
            id: 'error-fallback-device',
            index: '0',
            name: 'Default Audio Device',
            isDefault: true,
            friendlyName: 'Default Audio Device (Default)'
        }]);
    }
});

// Project management
app.get('/api/project', (req, res) => {
    res.json(projectData);
});

app.post('/api/project', (req, res) => {
    projectData = { ...projectData, ...req.body };
    res.json({ success: true, project: projectData });
});

app.post('/api/project/reset', (req, res) => {
    projectData = {
        name: '',
        beforeScripts: [],
        afterScripts: [],
        variables: {}
    };
    res.json({ success: true, project: projectData });
});

// Script management
app.post('/api/scripts/:type', (req, res) => {
    const { type } = req.params;
    const { action } = req.body;
    
    if (type === 'before') {
        projectData.beforeScripts.push(action);
    } else if (type === 'after') {
        projectData.afterScripts.push(action);
    } else {
        return res.status(400).json({ error: 'Invalid script type' });
    }
    
    res.json({ success: true, project: projectData });
});

app.delete('/api/scripts/:type/:index', (req, res) => {
    const { type, index } = req.params;
    const idx = parseInt(index);
    
    if (type === 'before' && idx >= 0 && idx < projectData.beforeScripts.length) {
        projectData.beforeScripts.splice(idx, 1);
    } else if (type === 'after' && idx >= 0 && idx < projectData.afterScripts.length) {
        projectData.afterScripts.splice(idx, 1);
    } else {
        return res.status(400).json({ error: 'Invalid script type or index' });
    }
    
    res.json({ success: true, project: projectData });
});

app.post('/api/scripts/:type/:index/move', (req, res) => {
    const { type, index } = req.params;
    const { direction } = req.body; // 'up' or 'down'
    const idx = parseInt(index);
    
    let scripts;
    if (type === 'before') {
        scripts = projectData.beforeScripts;
    } else if (type === 'after') {
        scripts = projectData.afterScripts;
    } else {
        return res.status(400).json({ error: 'Invalid script type' });
    }
    
    const newIdx = direction === 'up' ? idx - 1 : idx + 1;
    
    if (idx >= 0 && idx < scripts.length && newIdx >= 0 && newIdx < scripts.length) {
        [scripts[idx], scripts[newIdx]] = [scripts[newIdx], scripts[idx]];
    }
    
    res.json({ success: true, project: projectData });
});

// Generate script content
function generateScriptContent(scripts, projectName) {
    const content = [
        '@echo off',
        `REM Script for ${projectName || 'Unnamed Project'}`,
        'REM Generated by Sunshine Script Builder Web',
        ''
    ];
    
    // Add project variables as environment variables
    for (const [varName, varData] of Object.entries(projectData.variables)) {
        content.push(`set ${varName}=${varData.value}`);
    }
    
    if (Object.keys(projectData.variables).length > 0) {
        content.push('');
    }
    
    // Add script commands
    scripts.forEach((script, i) => {
        content.push(`REM Step ${i + 1}: ${script.actionName}`);
        
        let command = script.command;
        // Replace variables in command
        for (const [varName, varValue] of Object.entries(script.variables || {})) {
            command = command.replace(new RegExp(`{${varName}}`, 'g'), varValue);
        }
        
        content.push(command);
        content.push('');
    });
    
    content.push('REM Script completed');
    
    return content.join('\\n');
}

// Export endpoints
app.get('/api/export/preview', (req, res) => {
    const beforeContent = generateScriptContent(projectData.beforeScripts, projectData.name);
    const afterContent = generateScriptContent(projectData.afterScripts, projectData.name);
    
    const jsonConfig = {
        name: projectData.name || 'Game Name',
        cmd: 'path/to/your/game.exe',
        'prep-cmd': []
    };
    
    if (projectData.beforeScripts.length > 0 || projectData.afterScripts.length > 0) {
        const prepCmd = {};
        
        if (projectData.beforeScripts.length > 0) {
            prepCmd.do = `scripts\\\\${(projectData.name || 'project').replace(/\\s+/g, '_')}_before.bat`;
        }
        
        if (projectData.afterScripts.length > 0) {
            prepCmd.undo = `scripts\\\\${(projectData.name || 'project').replace(/\\s+/g, '_')}_after.bat`;
        }
        
        jsonConfig['prep-cmd'].push(prepCmd);
    }
    
    res.json({
        beforeScript: beforeContent,
        afterScript: afterContent,
        jsonConfig: JSON.stringify(jsonConfig, null, 2)
    });
});

app.get('/api/export/bat/:type', (req, res) => {
    const { type } = req.params;
    let scripts, filename;
    
    if (type === 'before') {
        scripts = projectData.beforeScripts;
        filename = `${(projectData.name || 'project').replace(/\\s+/g, '_')}_before.bat`;
    } else if (type === 'after') {
        scripts = projectData.afterScripts;
        filename = `${(projectData.name || 'project').replace(/\\s+/g, '_')}_after.bat`;
    } else {
        return res.status(400).json({ error: 'Invalid script type' });
    }
    
    const content = generateScriptContent(scripts, projectData.name);
    
    res.setHeader('Content-Type', 'application/octet-stream');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(content);
});

app.get('/api/export/json', (req, res) => {
    const jsonConfig = {
        name: projectData.name || 'Game Name',
        cmd: 'path/to/your/game.exe',
        'prep-cmd': []
    };
    
    if (projectData.beforeScripts.length > 0 || projectData.afterScripts.length > 0) {
        const prepCmd = {};
        
        if (projectData.beforeScripts.length > 0) {
            prepCmd.do = `scripts\\\\${(projectData.name || 'project').replace(/\\s+/g, '_')}_before.bat`;
        }
        
        if (projectData.afterScripts.length > 0) {
            prepCmd.undo = `scripts\\\\${(projectData.name || 'project').replace(/\\s+/g, '_')}_after.bat`;
        }
        
        jsonConfig['prep-cmd'].push(prepCmd);
    }
    
    const filename = `${(projectData.name || 'project').replace(/\\s+/g, '_')}_sunshine_config.json`;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.json(jsonConfig);
});

// Get variable options for dropdowns
app.get('/api/variable-options/:variableName', async (req, res) => {
    const { variableName } = req.params;
    let options = [];
    
    try {
        switch (variableName) {
            case 'device_id':
                // For display device IDs, use enumerated displays - simplified for now
                options = [
                    { value: 'DISPLAY\\AOC2401\\5&1B9320C7&0&UID33028', label: 'AOC 24G1WG3 (Display)' },
                    { value: 'DISPLAY\\HWP327A\\5&1B9320C7&0&UID33027', label: 'HP E232 (Display)' },
                    { value: 'DISPLAY\\GSM7765\\5&1B9320C7&0&UID33024', label: 'LG ULTRAGEAR (Display)' },
                    { value: '{0.0.0.00000000}.{336d5fab-93c7-4604-8ecc-35421228a322}', label: 'LG ULTRAGEAR (Audio)' },
                    { value: '{0.0.0.00000000}.{459db12c-f008-4671-bb3a-14de0baf2ba6}', label: 'High Definition Audio Device (Audio)' },
                    { value: '{0.0.0.00000000}.{cfff7096-63f8-4354-99e7-b565993831a8}', label: 'Shure MVX2U Headphones (Audio)' },
                    { value: '{0.0.0.00000000}.{e7d8df80-c73a-4e07-89b6-10a034c97355}', label: 'Logitech PRO X Wireless (Audio)' }
                ];
                break;
                
            case 'device_name':
                // For device names, primarily audio devices
                options = [
                    { value: 'LG ULTRAGEAR (NVIDIA High Definition Audio)', label: 'LG ULTRAGEAR (NVIDIA High Definition Audio)' },
                    { value: 'Speakers (High Definition Audio Device)', label: 'Speakers (High Definition Audio Device) (Default)' },
                    { value: 'Headphones (2- Shure MVX2U)', label: 'Headphones (2- Shure MVX2U)' },
                    { value: 'Speakers (Logitech PRO X Wireless Gaming Headset)', label: 'Speakers (Logitech PRO X Wireless Gaming Headset)' }
                ];
                break;
                
            case 'service_name':
                // Common Windows services
                options = [
                    { value: 'Spooler', label: 'Print Spooler' },
                    { value: 'Themes', label: 'Themes' },
                    { value: 'AudioSrv', label: 'Windows Audio' },
                    { value: 'AudioEndpointBuilder', label: 'Windows Audio Endpoint Builder' },
                    { value: 'Audiosrv', label: 'Windows Audio Service' },
                    { value: 'NVIDIA Display Driver Service', label: 'NVIDIA Display Driver Service' },
                    { value: 'AMD External Events Utility', label: 'AMD External Events Utility' }
                ];
                break;
                
            case 'process_name':
                // Common processes
                options = [
                    { value: 'steam.exe', label: 'Steam' },
                    { value: 'EpicGamesLauncher.exe', label: 'Epic Games Launcher' },
                    { value: 'uplay.exe', label: 'Ubisoft Connect' },
                    { value: 'origin.exe', label: 'Origin' },
                    { value: 'discord.exe', label: 'Discord' },
                    { value: 'spotify.exe', label: 'Spotify' },
                    { value: 'chrome.exe', label: 'Google Chrome' },
                    { value: 'firefox.exe', label: 'Mozilla Firefox' }
                ];
                break;
                
            case 'width':
            case 'height':
                // Common resolutions
                const resolutions = [
                    { value: '1920', label: '1920 (1080p width)' },
                    { value: '1080', label: '1080 (1080p height)' },
                    { value: '2560', label: '2560 (1440p width)' },
                    { value: '1440', label: '1440 (1440p height)' },
                    { value: '3840', label: '3840 (4K width)' },
                    { value: '2160', label: '2160 (4K height)' },
                    { value: '1366', label: '1366' },
                    { value: '768', label: '768' },
                    { value: '1280', label: '1280' },
                    { value: '720', label: '720' }
                ];
                options = variableName === 'width' ? 
                    resolutions.filter(r => ['1920', '2560', '3840', '1366', '1280'].includes(r.value)) :
                    resolutions.filter(r => ['1080', '1440', '2160', '768', '720'].includes(r.value));
                break;
                
            case 'refresh_rate':
                options = [
                    { value: '60', label: '60 Hz' },
                    { value: '75', label: '75 Hz' },
                    { value: '120', label: '120 Hz' },
                    { value: '144', label: '144 Hz' },
                    { value: '165', label: '165 Hz' },
                    { value: '240', label: '240 Hz' }
                ];
                break;
                
            case 'volume':
                options = [
                    { value: '0', label: '0% (Muted)' },
                    { value: '25', label: '25%' },
                    { value: '50', label: '50%' },
                    { value: '75', label: '75%' },
                    { value: '100', label: '100%' }
                ];
                break;
                
            case 'seconds':
                options = [
                    { value: '1', label: '1 second' },
                    { value: '2', label: '2 seconds' },
                    { value: '3', label: '3 seconds' },
                    { value: '5', label: '5 seconds' },
                    { value: '10', label: '10 seconds' },
                    { value: '30', label: '30 seconds' }
                ];
                break;
                
            default:
                // Check if it's a Sunshine variable
                const sunshineVars = [
                    { value: '${SUNSHINE_CLIENT_WIDTH}', label: 'Client Width' },
                    { value: '${SUNSHINE_CLIENT_HEIGHT}', label: 'Client Height' },
                    { value: '${SUNSHINE_CLIENT_FPS}', label: 'Client FPS' },
                    { value: '${SUNSHINE_APP_NAME}', label: 'App Name' }
                ];
                options = sunshineVars;
                break;
        }
        
        res.json(options);
    } catch (error) {
        console.error(`Failed to get options for variable ${variableName}:`, error);
        res.json([]);
    }
});

// Helper function to call internal APIs
async function apiCall(endpoint) {
    // Since we're calling our own API from within the server,
    // we'll call the handler functions directly to avoid HTTP overhead
    if (endpoint === '/displays') {
        try {
            // Use the same command as the main API endpoint
            const cmd = `powershell.exe -command 'Add-Type -AssemblyName System.Windows.Forms; $screens = [System.Windows.Forms.Screen]::AllScreens; $pnpMonitors = @(); try { $pnpMonitors = Get-PnpDevice -Class Monitor | Where-Object { $_.Status -eq "OK" } } catch { }; $screenIndex = 0; foreach ($screen in $screens) { $screenIndex++; $deviceId = "fallback-id-" + $screenIndex; $friendlyName = "Display " + $screenIndex; if ($pnpMonitors.Count -ge $screenIndex) { $pnp = $pnpMonitors[$screenIndex - 1]; if ($pnp.InstanceId) { $deviceId = $pnp.InstanceId; $friendlyName = $pnp.FriendlyName } }; Write-Output ($screenIndex.ToString() + "|" + $deviceId + "|" + $screen.DeviceName + "|" + $screen.Bounds.Width + "x" + $screen.Bounds.Height + "|" + $screen.Primary + "|" + $friendlyName) }'`;
            
            const result = await executePowerShell(cmd);
            const displays = [];
            
            if (result.stdout) {
                const lines = result.stdout.split('\n');
                for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (trimmedLine.includes('|') && !trimmedLine.startsWith('Found')) {
                        const parts = trimmedLine.split('|');
                        if (parts.length >= 6) {
                            const id = parseInt(parts[0]);
                            const deviceId = parts[1];
                            const devicePath = parts[2];
                            const resolution = parts[3];
                            const isPrimary = parts[4].toLowerCase() === 'true';
                            const friendlyName = parts[5];
                            
                            displays.push({
                                id: id,
                                deviceId: deviceId,
                                name: devicePath,
                                devicePath: devicePath,
                                resolution: resolution,
                                isPrimary: isPrimary,
                                friendlyName: `${friendlyName} - ${resolution}${isPrimary ? '*' : ''}`,
                                displayName: friendlyName
                            });
                        }
                    }
                }
            }
            
            return displays;
                
        } catch (error) {
        console.error('Failed to enumerate displays in apiCall:', error);
        return [{ id: 1, deviceId: '{default-display-id}', name: '\\\\.\\DISPLAY1', devicePath: '\\\\.\\DISPLAY1', resolution: 'Unknown', isPrimary: true, friendlyName: 'Primary Display - Unknown*', displayName: 'Primary Display' }];
    }
    } else if (endpoint === '/audio-devices') {
        try {
            // Simplified fallback for now - return basic structure
            return [
                { id: '{0.0.0.00000000}.{459db12c-f008-4671-bb3a-14de0baf2ba6}', index: '1', name: 'Speakers (High Definition Audio Device)', isDefault: true, friendlyName: 'Speakers (High Definition Audio Device) (Default)' },
                { id: '{0.0.0.00000000}.{cfff7096-63f8-4354-99e7-b565993831a8}', index: '2', name: 'Headphones (2- Shure MVX2U)', isDefault: false, friendlyName: 'Headphones (2- Shure MVX2U)' }
            ];
        } catch (error) {
            return [{ id: 'default-audio-device', index: '0', name: 'Default Audio Device', isDefault: true, friendlyName: 'Default Audio Device (Default)' }];
        }
    }
    return [];
}

// Variables management
app.post('/api/variables', (req, res) => {
    const { name, value, description } = req.body;
                    id: 1,
                    deviceId: '{default-display-id}',
                    name: '\\\\.\\DISPLAY1',
                    devicePath: '\\\\.\\DISPLAY1',
                    resolution: 'Unknown',
                    isPrimary: true,
                    friendlyName: 'Primary Display - Unknown*',
                    displayName: 'Primary Display'
                });
            }
            return displays;
        } catch (error) {
            return [{ id: 1, deviceId: '{default-display-id}', name: '\\\\.\\DISPLAY1', devicePath: '\\\\.\\DISPLAY1', resolution: 'Unknown', isPrimary: true, friendlyName: 'Primary Display - Unknown*', displayName: 'Primary Display' }];
        }
    } else if (endpoint === '/audio-devices') {
        try {
            const cmd = `powershell.exe -command "try { Import-Module AudioDeviceCmdlets -ErrorAction Stop; Get-AudioDevice -List | Where-Object {$_.Type -eq 'Playback'} | ForEach-Object { Write-Output ('{0}|{1}|{2}|{3}' -f $_.Index, $_.Name, $_.Default, $_.ID) } } catch { Write-Output 'MODULE_NOT_AVAILABLE' }"`;
            const result = await executePowerShell(cmd);
            const audioDevices = [];
            if (result.stdout && !result.stdout.includes('MODULE_NOT_AVAILABLE')) {
                const lines = result.stdout.split('\n');
                for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (trimmedLine.includes('|')) {
                        const parts = trimmedLine.split('|');
                        if (parts.length >= 4) {
                            audioDevices.push({
                                id: parts[3],
                                index: parts[0],
                                name: parts[1],
                                isDefault: parts[2].toLowerCase() === 'true',
                                friendlyName: `${parts[1]}${parts[2].toLowerCase() === 'true' ? '*' : ''}`
                            });
                        }
                    }
                }
            }
            if (audioDevices.length === 0) {
                audioDevices.push({ id: 'default', index: '0', name: 'Default Audio Device', isDefault: true, friendlyName: 'Default Audio Device*' });
            }
            return audioDevices;
        } catch (error) {
            return [{ id: 'default', index: '0', name: 'Default Audio Device', isDefault: true, friendlyName: 'Default Audio Device*' }];
        }
    }
    return [];
}

// Variables management
app.post('/api/variables', (req, res) => {
    const { name, value, description } = req.body;
    
    if (!name || !value) {
        return res.status(400).json({ error: 'Name and value are required' });
    }
    
    projectData.variables[name] = { value, description: description || '' };
    res.json({ success: true, variables: projectData.variables });
});

app.delete('/api/variables/:name', (req, res) => {
    const { name } = req.params;
    
    if (projectData.variables[name]) {
        delete projectData.variables[name];
    }
    
    res.json({ success: true, variables: projectData.variables });
});

// Serve main app
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Start server
app.listen(PORT, () => {
    console.log(`Sunshine Script Builder Web running at http://localhost:${PORT}`);
    console.log('Open your browser and navigate to the URL above to use the application.');
});